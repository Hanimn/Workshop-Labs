#!/usr/bin/env python3
"""
Phase 3 Demo Script - CTI Web Interface Integration
Demonstrates the integration of Phase 1 + Phase 2 with a web interface
"""
import sys
import time
import threading
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def print_header(title: str):
    """Print formatted header"""
    print("\n" + "=" * 60)
    print(f"  {title}")
    print("=" * 60)

def print_separator():
    """Print separator line"""
    print("-" * 60)

def demo_web_interface_features():
    """Demonstrate web interface features"""
    print_header("PHASE 3 DEMO: CTI Web Interface Integration")
    
    print("üåê Multi-language CTI Web Interface Features:")
    print()
    
    print("üí¨ CHAT INTERFACE:")
    print("   ‚Ä¢ Ask questions in any supported language")
    print("   ‚Ä¢ Automatic language detection")
    print("   ‚Ä¢ Response translation to user's language")
    print("   ‚Ä¢ Real-time processing with confidence scores")
    print()
    
    print("üìÑ DOCUMENT PROCESSING:")
    print("   ‚Ä¢ Drag & drop CTI documents")
    print("   ‚Ä¢ Automatic language detection and translation")
    print("   ‚Ä¢ Support for JSON, TXT, PDF formats")
    print("   ‚Ä¢ Background processing with status updates")
    print()
    
    print("üîÑ TRANSLATION SERVICES:")
    print("   ‚Ä¢ Real-time text translation")
    print("   ‚Ä¢ Multiple translation backends")
    print("   ‚Ä¢ Confidence scoring and service fallbacks")
    print("   ‚Ä¢ Translation caching for performance")
    print()
    
    print("üìä ANALYTICS & STATISTICS:")
    print("   ‚Ä¢ Query processing statistics")
    print("   ‚Ä¢ Language distribution analysis")
    print("   ‚Ä¢ Document processing metrics")
    print("   ‚Ä¢ System performance monitoring")
    print()

def demo_api_endpoints():
    """Demonstrate API endpoints"""
    print_header("API ENDPOINTS AVAILABLE")
    
    endpoints = [
        ("POST /api/chat", "Multi-language chat with CTI pipeline"),
        ("POST /api/detect-language", "Language detection for text"),
        ("POST /api/translate", "Text translation between languages"),
        ("POST /api/upload-document", "CTI document upload and processing"),
        ("GET /api/documents", "List processed documents"),
        ("GET /api/stats", "System statistics"),
        ("GET /api/history", "Query history"),
        ("GET /docs", "Interactive API documentation"),
    ]
    
    for endpoint, description in endpoints:
        print(f"   üîó {endpoint:<25} - {description}")
    
    print()

def demo_integration_architecture():
    """Show integration architecture"""
    print_header("PHASE 3 ARCHITECTURE: Full Integration")
    
    print("üìã Integration Stack:")
    print()
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ                    Phase 3: Web Interface               ‚îÇ")
    print("‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ")
    print("‚îÇ  ‚îÇ    Chat     ‚îÇ ‚îÇ  Document   ‚îÇ ‚îÇ   Translation   ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îÇ Interface   ‚îÇ ‚îÇ  Processing ‚îÇ ‚îÇ    Services     ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print("                            ‚îÇ")
    print("                            ‚ñº")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ              Phase 2: Multi-language Support           ‚îÇ")
    print("‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ")
    print("‚îÇ  ‚îÇ  Language   ‚îÇ ‚îÇ Translation ‚îÇ ‚îÇ   Query/Doc     ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îÇ  Detection  ‚îÇ ‚îÇ   Service   ‚îÇ ‚îÇ   Processing    ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print("                            ‚îÇ")
    print("                            ‚ñº")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ           Phase 1: RAG CTI Pipeline Foundation         ‚îÇ")
    print("‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ")
    print("‚îÇ  ‚îÇ   Ollama    ‚îÇ ‚îÇ  Vector DB  ‚îÇ ‚îÇ   RAG Pipeline  ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îÇ (gpt-oss)   ‚îÇ ‚îÇ   (Future)  ‚îÇ ‚îÇ    (Future)     ‚îÇ   ‚îÇ")
    print("‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print()

def demo_usage_examples():
    """Show usage examples"""
    print_header("USAGE EXAMPLES")
    
    print("üöÄ Starting the Web Interface:")
    print("   python start_cti_web.py")
    print("   # or")
    print("   python -m src.interfaces.cti_web_interface")
    print()
    
    print("üí¨ Example Chat Interactions:")
    print("   English: 'What are the latest APT29 techniques?'")
    print("   French:  'Quelles sont les techniques d\\'APT28?'")
    print("   German:  'Welche Techniken nutzt die Lazarus-Gruppe?'")
    print("   Spanish: '¬øCu√°les son las t√°cticas de FIN7?'")
    print()
    
    print("üìÑ Document Upload Examples:")
    print("   ‚Ä¢ Upload sample_multilang_cti.json")
    print("   ‚Ä¢ Drag & drop threat reports")
    print("   ‚Ä¢ Process STIX/TAXII documents")
    print()
    
    print("üîÑ Translation Examples:")
    print("   ‚Ä¢ Translate CTI reports between languages")
    print("   ‚Ä¢ Convert threat descriptions")
    print("   ‚Ä¢ Localize security alerts")
    print()

def test_components():
    """Test Phase 3 components"""
    print_header("COMPONENT TESTING")
    
    try:
        print("üß™ Testing web interface components...")
        
        # Test imports
        from src.interfaces.cti_web_interface import CTIWebInterface
        print("   ‚úÖ Web interface module imported")
        
        # Create interface instance  
        interface = CTIWebInterface()
        print("   ‚úÖ Interface instance created")
        
        # Test FastAPI app
        app = interface.app
        print(f"   ‚úÖ FastAPI app created: {app.title}")
        
        # Test Phase 2 integration
        print(f"   ‚úÖ Language detector: {interface.language_detector.__class__.__name__}")
        print(f"   ‚úÖ Translator: {interface.translator.__class__.__name__}")
        print(f"   ‚úÖ Document processor: {interface.document_processor.__class__.__name__}")
        print(f"   ‚úÖ Query processor: {interface.query_processor.__class__.__name__}")
        
        print("\nüéâ All components working correctly!")
        
    except Exception as e:
        print(f"   ‚ùå Component test failed: {e}")
        return False
    
    return True

def main():
    """Run Phase 3 demonstration"""
    print("üöÄ RAG CTI Pipeline - Phase 3: Web Interface Integration")
    print("üåê Comprehensive web interface for multi-language CTI processing")
    
    try:
        # Run demonstrations
        demo_web_interface_features()
        demo_api_endpoints()
        demo_integration_architecture()
        demo_usage_examples()
        
        # Test components
        if not test_components():
            print("\n‚ùå Component testing failed")
            return 1
        
        print_header("PHASE 3 DEMO COMPLETE")
        print("‚úÖ Web interface integration successful!")
        print()
        print("üéØ What You Can Do Now:")
        print("   1. Start the web interface: python start_cti_web.py")
        print("   2. Open browser: http://localhost:8000")
        print("   3. Chat in multiple languages")
        print("   4. Upload CTI documents")
        print("   5. Use translation services")
        print("   6. View system statistics")
        print()
        print("üåü Phase 3 Features Delivered:")
        print("   ‚úÖ Professional web interface")
        print("   ‚úÖ Multi-language chat system")
        print("   ‚úÖ Document processing pipeline")
        print("   ‚úÖ Real-time translation")
        print("   ‚úÖ System analytics")
        print("   ‚úÖ RESTful API endpoints")
        print()
        print("üìö Next Steps:")
        print("   ‚Ä¢ Integrate with actual Ollama RAG pipeline")
        print("   ‚Ä¢ Add vector database for document storage")
        print("   ‚Ä¢ Implement real-time CTI feed integration")
        print("   ‚Ä¢ Add MITRE ATT&CK technique mapping")
        
        # Ask if user wants to start the server
        print("\nüöÄ Would you like to start the web interface now?")
        print("   Run: python start_cti_web.py")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Demo interrupted by user")
        return 0
    except Exception as e:
        print(f"\n‚ùå Demo failed with error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())